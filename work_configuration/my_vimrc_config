""" Configuration vim
""" Leader to Ctrl + s
let mapleader=' '

syntax enable

""" Local language to us
""" setlocal spell spelllang=en_us

set number
set numberwidth=5
set ruler
set title
set encoding=utf-8
set history=5000

set statusline=%f
set statusline+=%=
set statusline+=%y
set statusline+=%l
set statusline+=/
set statusline+=%L


set laststatus=2

set wildmode=full:list
set nowrap

set mouse=a
set mousemodel=popup

colorscheme default 

set showcmd
set showmatch
set hidden
set lazyredraw
set autoindent
set smarttab
set expandtab
set textwidth=80
set colorcolumn=+1
set tabstop=2
set softtabstop=2
set cursorline

set shiftwidth=2
set shiftround

set nojoinspaces
set foldenable
set confirm
set pastetoggle=<F5>

""" Backspace experimentation
set backspace=indent,eol,start

set gdefault

set cmdheight=2

""" No swapfile, backup or file writing
set nobackup
set noswapfile
set nowb

set autoread
set autowrite

set splitright
set splitbelow

""" Split management
set winwidth=84
set winheight=5
set winminheight=5
set winheight=999


set scrolloff=5
set nocompatible

"""NORMAL MAPPING


nnoremap cc c2w
nnoremap ccc c3w


""" Delete lines below
nnoremap dj dd
nnoremap djj dddd
nnoremap djjj dddddd
nnoremap djjjj  dddddddd

""" Delete lines above
nnoremap dkk kkdddd
nnoremap dkkk kkkdddddd
nnoremap dkkkk kkkkdddddddd


""" Normal mapping
nnoremap <up> ddP<esc>
nnoremap <down> ddjp<esc>
""" Not a good fit with easymotion which uses space space
""" nnoremap <space><space> vwhh
nnoremap j gj
nnoremap gj j 
nnoremap k gk
nnoremap gk k

nnoremap K <nop>

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l


""" Edit our vimrc on demand
nnoremap <leader>ev :vsplit ~/.vimrc<cr>

""" Reload our vimrc on demand
nnoremap <leader>sv :source ~/.vimrc<cr>


nnoremap G Gzz
nnoremap n nzz
nnoremap N Nzz
nnoremap } }zz
nnoremap { {zz

nnoremap o o<esc>
nnoremap O O<esc>

"""Ctags mapping
nnoremap <C-Up> <C-]>
nnoremap <C-Down> <C-T>

""" Zeal tooling

""" Search documentation on zeal
""" Maybe think about the K key for modification 
nnoremap gz :!zeal "<cword>"&<CR><CR>

"""INSERT MAPPING
inoremap jj <esc>kj
""" No tab experience
"""inoremap <Tab> <nop>
"==========================================================================="
" Indentation (got to opening bracket and indent section) 

""" Insert mappings
""inoremap jj <esc><c-r>
""inoremap JJ <esc><c-r>


nmap <leader>ip [{=%

"==========================================================================="
"Highlight section between brackets (do to opening bracket and highlight)
nmap <leader>hp [{%v%<Home>
"
"==========================================================================="

""" Wrap a text in parantheses after selection
""""TODO create mapping

""" go to specific line  g22  <=> 22G
 

""" Simple mappings
map Q <nop>
""" map <left> :echoe "Use h"<cr>
""" map <right> :echoe "Use l"<cr>
""" map <up> :echoe "Use k"<cr>
""" map <down> :echoe "Use j"<cr>


command! Q q "Bind Q to quit
command! Qall qall "Bind Q to quit
command! QA qall "Bind Q to quit


" Create the `tags` file (may need to install ctags first)
command! MakeTags !ctags -R .


""" Abbreviations
""" Javascript abreviations
autocmd Filetype javascript :iabbrev <buffer> debug debugger<esc>p
autocmd Filetype javascript :iabbrev <buffer> log console.log()<esc>h
""" User de snippets pour ces abbreviations
"""autocmd Filetype javascript :iabbrev <buffer> log console.log()
"""autocmd Filetype javascript :iabbrev <buffer> todo //TODO:
"""

""" Ruby abreviations

autocmd Filetype ruby :iabbrev <buffer> todo #TODO:

autocmd Filetype ruby :iabbrev <buffer> pry binding.pry<esc>p


""" Reouvrir un fichier au dernier endroit ou il fut édité et enregister
""" les dossiers
""" url :
"""http://vim.wikia.com/wiki/Restore_cursor_to_file_position_in_previous_editing_session



" Tell vim to remember certain things when we exit
"  '10  :  marks will be remembered for up to 10 previously edited files
"  "100 :  will save up to 100 lines for each register
"  :20  :  up to 20 lines of command-line history will be remembered
"  %    :  saves and restores the buffer list
"  n... :  where to save the viminfo files
set viminfo='10,\"100,:20,%,n~/.viminfo
function! ResCur()
if line("'\"") <= line("$")
  normal! g`"
    return 1
    endif
    endfunction

  augroup resCur
autocmd!
autocmd BufWinEnter * call ResCur()
augroup END

